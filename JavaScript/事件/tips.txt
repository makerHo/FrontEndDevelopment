html5+js
新元素
本地存储,存储在客户端，也就是用户的电脑上。
1.localStorage,名值对的形式存储数据，不足时不能设置终止日期,如果不手动
清楚的话，用始终保存在本地。
方法
setItem(key,value);存储
getItem(key);获取key的值
removeItem(key):把key的值删除
key(index):根据index返回相应的key，先存储的数据的index为0。
clear();把所有的localStorage存储的数据清空。

属性
length：存储数据的条数

contenteditable="true"元素的内容可编辑


JSON.stringify(member):把名值对的对象解析为名值对的字符串.
JSON.parse(string);把名值对的字符串解析为名值对的对象.

2.sessionStorage：有生命周期，浏览器关闭就清除。
页面之间共享数据.
sessionStorage一般用来做登录
setItme(key,value)
getItem(key)
removeItem(key)
key(index):根据index，读取sessionStorage的key;
clear()：清除所有的sesionStorage保存的数据。
属性
length：保存数据的条数

3.cookie：本地存储，保存的数据少，不能超过4k，
以名值对的形式存储数据
一般用来做多长时间不用登录。

事件 Event
页面上的行为被称为事件。
load加载事件
unload卸载
click单击
dblclick双击(double click)
change改变事件
focus获得焦点
blur失去焦点
select：选择
copy：复制
cut剪切
mouseover鼠标放上
mouseout鼠标移开
mousemove鼠标移动

为元素绑定事件
1.元素.onclick
2.元素.addEventListener(事件类型，事件函数);

z-index：元素除了静态定位，其它定位都有z-index属性。


document.cookie="username=peter";

secure:安全访问
document.cookie="key=value;expires=时间;path=路径;domain=主机名;secure"


github代码托管，协同开发。
ReadMe.md
md:markdown，简化版的html，也支持html。
#:h1
##：h2

贡献代码
fork别人的库
修改,create new file创建文件
pull request提交贡献的代码

meger合并
confirm merge确认合并

change:元素的内容发生改变就会触发。
select和input type=file

focus:获得焦点
blur:失去焦点

keyup:键盘按键松开;

事件对象
事件产生时会产生事件对象，事件对象有属性和方法可以调用，
事件结束时，事件对象消失。
事件对象在事件侦听器中作为参数传递。
元素.addEventListener(事件类型，function(evt){});
属性：
evt.type:事件类型;
evt.keyCode:键盘按钮的值
方法
evt.preventDefault();阻止默认动作
增强用户体验，考虑js被禁止的情况。



a：先是click，然后是跳转。
表单的提交按钮，也是先click，再跳转。

js的加载load，元素的加载
js的浏览器的阻塞
1.js放在代码的最后
2.window.addEventListener("load",function(){});
页面加载完在执行代码
3.不使用window.addEventListener("load",function(){});
<script src="load.js" defer></script>


<script src="a.js"></script>
<script src="b.js" ></script>
<script src="c.js"></script>
正常情况下，三个js是顺序执行。
如果为b加了async（异步），页面就先执行a和c，等b执行结束在显示b的结果。
